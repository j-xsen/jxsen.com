/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 jaxsen.glb -T -t 
Files: jaxsen.glb [8.48MB] > Z:\art\models\jaxsen\jaxsen-transformed.glb [711.79KB] (92%)
*/

import * as THREE from 'three'
import React, {Suspense, useEffect, useRef} from 'react'
import {SpotLight, useGLTF} from '@react-three/drei'
import {GLTF} from 'three-stdlib'
import {ObjectMap, useFrame} from "@react-three/fiber";
import Transformation from "../types/Transformation";

type GLTFResult = GLTF & ObjectMap & {
    nodes: {
        Mesh_0: THREE.Mesh
    }
    materials: {
        Material_0: THREE.MeshStandardMaterial
    }
}

export function Jaxsen(props: Transformation) {
    const mRef = useRef<THREE.Mesh>(null!)
    const spotRef = useRef<THREE.SpotLight>(null!)
    const groupRef = useRef<THREE.Group>(null!)
    const targetRef = useRef<THREE.Object3D>(new THREE.Object3D())


    const {nodes, materials} = useGLTF('/models/jaxsen-transformed.glb') as GLTFResult

    useEffect(() => {
        if (spotRef.current) {
            spotRef.current.target = targetRef.current
        }
    }, [])


    return (
        <Suspense fallback={<></>}>
        <group {...props} dispose={null}>
                <mesh geometry={nodes.Mesh_0.geometry} ref={mRef} material={materials.Material_0} scale={11.489}/>
                <primitive object={targetRef.current} position={[0, 3, 0]} />
                <SpotLight position={[0, 8, 5]} ref={spotRef} anglePower={5} intensity={500} scale={8} distance={75}
                               angle={Math.PI}/>
            </group>
        </Suspense>
    )
}

useGLTF.preload('/models/jaxsen-transformed.glb')
