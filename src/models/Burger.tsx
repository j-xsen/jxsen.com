/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 burger.glb -T -t 
Files: burger.glb [51.47KB] > Z:\coding\jxsen_2025\public\models\burger-transformed.glb [5.18KB] (90%)
*/

import * as THREE from 'three'
import {Vector3} from 'three'
import React from 'react'
import {useGLTF} from '@react-three/drei'
import {GLTF} from 'three-stdlib'
import {ObjectMap, useFrame} from '@react-three/fiber'
import Transformation from "../types/Transformation";
import WordMesh from "../WordMesh";
import FontHolder from '../types/FontHolder'

type GLTFResult = GLTF & ObjectMap & {
    nodes: {
        burger: THREE.Mesh
        top_bun: THREE.Mesh
    }
    materials: {
        ['Material.001']: THREE.MeshStandardMaterial
        bun: THREE.MeshStandardMaterial
    }
}

export function Burger(props: Transformation & FontHolder) {
    const {nodes, materials} = useGLTF('/models/burger-transformed.glb') as GLTFResult
    const groupRef = React.useRef<THREE.Group>(null!)
    const [hovered, setHovered] = React.useState(false)

    useFrame((state) => {
        // pulse burger
        groupRef.current.rotation.y += 0.002
        groupRef.current.position.y = props.position.y + Math.sin(state.clock.elapsedTime) * 0.5
    })


    return (<>
            <group dispose={null} scale={hovered ? props.scale + 1 : props.scale} ref={groupRef}
                   position={props.position}
                   onPointerOver={() => setHovered(true)} onPointerOut={() => setHovered(false)}>
                <mesh geometry={nodes.burger.geometry} material={materials['Material.001']}/>
                <mesh geometry={nodes.top_bun.geometry} material={materials.bun} position={[0, 0.128, 0]}/>
            </group>
            {hovered && <WordMesh center={new Vector3(0, -11, 6)}
                                  font={props.font}
                                  word="Bu,rg,a,,Flip,pe,r,,2"/>}</>
    )
}

useGLTF.preload('/models/burger-transformed.glb')
